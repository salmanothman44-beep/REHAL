generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  fullName        String
  phone           String
  role            Role
  university      String?
  isVerified      Boolean   @default(false)
  otpCode         String?   @db.VarChar(6)
  otpExpiresAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  driverProfile   Driver?

  bookings        Booking[]
  reviews         Review[]
}

model Driver {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
  photoUrl         String?
  licenseNumber    String
  vehicleMake      String
  vehicleModel     String
  vehiclePlate     String
  approved         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  trips            Trip[]
  reviews          Review[]
}

model Trip {
  id               String    @id @default(cuid())
  driver           Driver    @relation(fields: [driverId], references: [id])
  driverId         String
  university       String
  origin           String
  destination      String
  routeStops       String[]
  departureTime    DateTime
  arrivalTime      DateTime
  pricePerSeat     Int
  totalSeats       Int
  bookedSeats      Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  bookings         Booking[]
}

model Booking {
  id            String   @id @default(cuid())
  trip          Trip     @relation(fields: [tripId], references: [id])
  tripId        String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  seats         Int
  amountPaid    Int
  status        BookingStatus @default(PENDING)
  createdAt     DateTime @default(now())

  @@index([tripId])
  @@index([userId])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  driver      Driver   @relation(fields: [driverId], references: [id])
  driverId    String
  createdAt   DateTime @default(now())

  @@index([driverId])
}

enum Role {
  STUDENT
  DRIVER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

